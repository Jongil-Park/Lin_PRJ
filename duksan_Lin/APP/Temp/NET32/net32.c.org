/* file : net32.c
 *
 * Receive-Socket과 Send-Socket을 생성해서 kernel과 UDP 통신을 한다. 
 *
 * 다른 Thread로부터 net32_message_queue를 통해 point data를 받는다.
 * 받은 data는 Send-Socket을 통해 kernel로 보낸다.
 *
 * |---------------|                            |---------|                     |--------|
 * | other Thread  | == net32_message_queue ==> | net32.c |  == Send-Socket ==> | Kernel |
 * |---------------|                            |---------|                     |--------|
 *
 *
 * kernel로부터 Receive-Socket을 통해 받은 point data를 
 * net32_queue에 넣어 message_handler.c로 보낸다.
 *  
 * |---------|                       |---------|                     |-------------------|
 * | Kernel  | == Receive-Socket ==> | net32.c |  == net32_queue ==> | message_handler.c |
 * |---------|                       |---------|                     |-------------------|
 *
 *
*/

#include <stdio.h>
#include <stdlib.h>
#include <sys/socket.h>
#include <sys/types.h>
#include <netinet/in.h>
#include <arpa/inet.h>
#include <errno.h>
#include <signal.h>
#include <sys/wait.h>
#include <fcntl.h>
#include <string.h>
#include <unistd.h>
#include <time.h>
#include <pthread.h>
#include <sys/stat.h>
#include <termios.h>
#include <sys/ioctl.h>
#include <sys/poll.h>
#include <strings.h>
#include <netdb.h>



/*******************************************************************/
//Define
#include "define.h"
#include "queue.h"
#include "point_manager.h"
#include "message_handler.h"
#include "net32.h"


/*******************************************************************/
extern float pGet(int pcm, int pno);
extern int pSet(int pcm, int pno, float value);

extern point_queue net32_queue;
extern point_queue net32_message_queue;

extern pthread_mutex_t net32Q_mutex;
extern pthread_mutex_t net32MessageQ_mutex;

//extern queue_status status;
extern float point_table[MAX_NET32_NUMBER][MAX_POINT_NUMBER];
extern CHK_STATUS_T *gp_status;										// gp_status

extern int multi_ddc;			// mode select flag
extern int my_pcm;				// my pcm number

unsigned char g_cNode[32];


// ----------------------------------------------------------------------------
// Global Variable
unsigned char net32_rxBuf[NET32_BUF_SIZE];
unsigned char net32_txBuf[NET32_BUF_SIZE];
unsigned char dbg_mtr_niq = 0;
unsigned char dbg_mtr_noq = 0;
int g_nViewNet32 = 0;						// debug문을 출력할 때 사용하는 flag



void net32_put_queue(point_info *p)
// ----------------------------------------------------------------------------
// INSERT A DATA INTO THE NET32_QUEUE
// Description : net32_queue에 data를 추가한다.
// Arguments   : p					Is a point-value pointer.
// Returns     : none
{
	STATUS_QUEUE_T *p_net32_q = (STATUS_QUEUE_T *) &gp_status->st_net32;

	pthread_mutex_lock( &net32Q_mutex );
	putq( &net32_queue, p );

	// check status
	p_net32_q->n_indata++;

	pthread_mutex_unlock( &net32Q_mutex );
}


int net32_get_queue(point_info *p)
// ----------------------------------------------------------------------------
// DATA GET NET32_QUEUE
// Description : net32_queue에서 data를 꺼내온다.
// Arguments   : p					Is a point-value pointer.
// Returns     : n_ret				Is a queue status type.
{
	int n_ret;
	STATUS_QUEUE_T *p_net32_q = (STATUS_QUEUE_T *) &gp_status->st_net32;

	memset( p, 0, sizeof(point_info) );

	pthread_mutex_lock( &net32Q_mutex );
	n_ret = getq( &net32_queue, p );

	// status change
	if ( n_ret == QUEUE_FULL ) {
		p_net32_q->n_full++;
	}
	else if ( n_ret == QUEUE_EMPTY ) {
		p_net32_q->n_empty++;
	}
	else if ( n_ret == SUCCESS ) {
		p_net32_q->n_outdata++;
	}

	pthread_mutex_unlock( &net32Q_mutex );
	
	return n_ret;
}


void net32_put_msgqueue(point_info *p)
// ----------------------------------------------------------------------------
// INSERT A DATA INTO THE NET32_MESSAGE_QUEUE
// Description : net32_message_queue에 data를 추가한다.
// Arguments   : p					Is a point-value pointer.
// Returns     : none
{
	STATUS_QUEUE_T *p_net32msg_q = (STATUS_QUEUE_T *) &gp_status->st_net32msg;

	pthread_mutex_lock( &net32MessageQ_mutex );
	putq( &net32_message_queue, p );

	// check status
	p_net32msg_q->n_indata++;

	pthread_mutex_unlock( &net32MessageQ_mutex );
}


int net32_get_msgqueue(point_info *p)
// ----------------------------------------------------------------------------
// DATA GET NET32_MESSAGE_QUEUE
// Description : net32_message_queue에서 data를 꺼내온다.
// Arguments   : p					Is a point-value pointer.
// Returns     : n_ret				Is a queue status type.
{
	int n_ret;
	STATUS_QUEUE_T *p_net32msg_q = (STATUS_QUEUE_T *) &gp_status->st_net32msg;

	memset( p, 0, sizeof(point_info) );

	pthread_mutex_lock( &net32MessageQ_mutex );
	n_ret = getq( &net32_message_queue, p );

	// status change
	if ( n_ret == QUEUE_FULL ) {
		p_net32msg_q->n_full++;
	}
	else if ( n_ret == QUEUE_EMPTY ) {
		p_net32msg_q->n_empty++;
	}
	else if ( n_ret == SUCCESS ) {
		p_net32msg_q->n_outdata++;
	}

	pthread_mutex_unlock( &net32MessageQ_mutex );
	
	return n_ret;
}


void net32_sleep(int sec,int usec) 
// ----------------------------------------------------------------------------
// WAIT TIMER
// Description : use select function for timer.
// Arguments   : sec		Is a second value.
//				 usec		Is a micro-second value. 
// Returns     : none
{
    struct timeval tv;
    tv.tv_sec = sec;
    tv.tv_usec = usec;                
    select(0,NULL,NULL,NULL,&tv);
    return;
}


/*
********************************************************************* 
* SEND A DATA TO THE KERNEL
* 
* Description	: This function is called by net32_main() to send a data.
* 					Data get from Net32_Message_Queue.
* 
* 					Token = | 0xff | 'T' | 0x06(Length) | debugNoqValue | debugNiqValue | ChkSum |
* 
*					Report = | 0xff | 'R' | 0x0C(Length) | debugNoqValue | debugNiqValue |
*							 | pcm | pno | fval[3] | fval[2] | fval[1] | fval[0] | ChkSum |
* 
*					Command = | 0xff | 'C' | 0x0C(Length) | debugNoqValue | debugNiqValue |
*             				  | pcm | pno | fval[3] | fval[2] | fval[1] | fval[0] | ChkSum |
* 
*					Require = | 0xff | 'r' | 0x0C(Length) | debugNoqValue | debugNiqValue |
*             				  | pcm | pno | fval[3] | fval[2] | fval[1] | fval[0] | ChkSum |
* 
* 
* Arguments		: p				Is a pointer to the NET32_T structure.
* 
* 
* Returns		: always 1
* 
********************************************************************* 
*/
int on_Send_To_Kernel(void *p)
{
	int i = 0;
	int result = 0;
	point_info point;
	unsigned char *pVal = (unsigned char *)&point.value;
	NET32_T *pNet32 = (NET32_T *)p;	
	NET32_TOKEN_T *pToken = (NET32_TOKEN_T *)pNet32->txBuf;
	NET32_MSG_T *pMsg = (NET32_MSG_T *)pNet32->txBuf;
	STATUS_THREAD_T *p_net32_t = (STATUS_THREAD_T *) &gp_status->st_net32_t;

	memset(&point, 0, sizeof(point));
		
	result = net32_get_msgqueue( &point );

	// check status
	p_net32_t->n_chkqueue++;

	if(result != SUCCESS) {

		pToken->cHeader = 0xff;
		pToken->cCmd = HANDLER_MSG_TOKEN;
		pToken->cLength =  sizeof(NET32_TOKEN_T);
		pToken->cDbgNoq = dbg_mtr_noq; 
		pToken->cDbgNiq = dbg_mtr_niq;
		pToken->cChkSum = 0;
		for (i = 0; i < pToken->cLength - 1; i++) 
			pToken->cChkSum -= pNet32->txBuf[i];
				
		write ( pNet32->iSendSock, (unsigned char *)pToken, sizeof(NET32_TOKEN_T) ); 

		// check status
		p_net32_t->n_tx += sizeof(NET32_TOKEN_T);

		return 1;
	}

	pMsg->cHeader = 0xff;
	if (point.message_type == NET32_TYPE_REPORT) {
		pMsg->cCmd = HANDLER_MSG_REPORT;
		if ( g_nViewNet32 )
			fprintf(stderr, "ToKernel pMsg REPORT ");
	} 
	else if (point.message_type == NET32_TYPE_COMMAND) {
		pMsg->cCmd = HANDLER_MSG_COMMAND;
		if ( g_nViewNet32 )
			fprintf(stderr, "ToKernel COMMAND ");
	} 
	else if (point.message_type == NET32_TYPE_REQUIRE) {
		pMsg->cCmd = HANDLER_MSG_REQUIRE;
		if ( g_nViewNet32 )
			fprintf(stderr, "ToKernel REQUIRE ");
	}
	
	if ( g_nViewNet32 ) {
		fprintf(stderr, " %d %d\n", point.pcm, point.pno);
		fflush(stderr);
	}
			
	pMsg->cLength = sizeof(NET32_MSG_T);
	pMsg->cDbgNoq = dbg_mtr_noq; 
	pMsg->cDbgNiq = dbg_mtr_niq;
	pMsg->cPcm = point.pcm;
	pMsg->cPno = point.pno;
	pMsg->cVal[0] = pVal[3];
	pMsg->cVal[1] = pVal[2];
	pMsg->cVal[2] = pVal[1];
	pMsg->cVal[3] = pVal[0];
	pMsg->cChkSum = 0;
	for (i = 0; i < pMsg->cLength - 1; i++) 
		pMsg->cChkSum -= pNet32->txBuf[i];
	
	write ( pNet32->iSendSock, (unsigned char *)pMsg, sizeof(NET32_MSG_T) ); 
	
	if ( g_nViewNet32 ) {
		fprintf ( stderr, "[NET32] Send length %d \n", sizeof(NET32_MSG_T) );
		fflush(stderr);
	}		
		
	// check status
	p_net32_t->n_tx += sizeof(NET32_MSG_T);

	return 1;
}


/*
********************************************************************* 
* RECEIVE A DATA FROM THE KERNEL
* 
* Description	: This function is called by net32_main() to receive a data.
* 					Data receive from KERNEL.
* 
* 
* Arguments		: p				Is a pointer to the NET32_T structure.
* 
*  
* Returns		: length of receive-data
* 
********************************************************************* 
*/
int on_Rcv_From_Kernel(void *p)
{
	int iRet = 0;
	NET32_T *pNet32 = (NET32_T *)p;	
	STATUS_THREAD_T *p_net32_t = (STATUS_THREAD_T *) &gp_status->st_net32_t;
	
	iRet = recv ( pNet32->iRcvSock, pNet32->rxBuf, NET32_BUF_SIZE, 0 );	
	pNet32->iRecvLength = iRet;

	if ( g_nViewNet32 ) {
		fprintf ( stderr, "[NET32] Rcv length %d \n", iRet );
		fflush(stderr);
	}


	// check status
	p_net32_t->n_rx += iRet;

	return iRet;	
}


/*
********************************************************************* 
* PARSING A TO RECEIVE DATA 
* 
* Description	: This function is called by net32_main() to receive a data.
* 				 	And data Insert to Net32_Queue.
* 
* 					Report = | 0xff | 'R' | 0x0C(Length) | x | x |
* 							 | pcm | pno | fval[3] | fval[2] | fval[1] | fval[0] | ChkSum |
* 
* 					Command = | 0xff | 'C' | 0x0C(Length) | x | x |
* 							  | pcm | pno | fval[3] | fval[2] | fval[1] | fval[0] | ChkSum |
* 
* 					Require = | 0xff | 'C' | 0x0C(Length) | x | x |
* 							  | pcm | pno | fval[3] | fval[2] | fval[1] | fval[0] | ChkSum |
* 
* 
* Arguments		: p				Is a pointer to the NET32_T structure.
* 
*  
* Returns		: none
* 
********************************************************************* 
*/
void on_Data_Handler(void *p) 
{
	int i = 0;
	point_info point;
	unsigned char cHandle = 0;
	unsigned char cChksum = 0;
	unsigned char *pVal;
	
	NET32_T *pNet32 = (NET32_T *)p;	
	pVal = (unsigned char *) &point.value;

	for (i = 0; i < pNet32->iRecvLength; i++) 
		cChksum += pNet32->rxBuf[i];
	
	cHandle = pNet32->rxBuf[1];
	
	if ( cChksum == 0 && pNet32->iRecvLength == (int)pNet32->rxBuf[2] ) {
		switch(cHandle) {
			case HANDLER_MSG_REPORT:
				point.pcm = pNet32->rxBuf[5];
				point.pno = pNet32->rxBuf[6];
				pVal[3] = pNet32->rxBuf[7];
				pVal[2] = pNet32->rxBuf[8];
				pVal[1] = pNet32->rxBuf[9];
				pVal[0] = pNet32->rxBuf[10];
				
				// 자신의 값이 Report된 경우에는 
				// 이미 point-table이 업데이트가 되어 있는 상태이다. 
				// 그렇기 때문에 자신의 값이 아닌 경우에만 net32 queue에 넣는다. 
				if (my_pcm != point.pcm) {
					point.message_type = NET32_TYPE_REPORT;
					net32_put_queue(&point);

					if ( g_nViewNet32 ) {
						fprintf(stderr, "FromKernel Msg Report %d %d %f\n", 
								point.pcm, point.pno, point.value);
						fflush(stderr);
					}
				}
				break;

			case HANDLER_MSG_COMMAND:
				point.pcm = pNet32->rxBuf[5];
				point.pno = pNet32->rxBuf[6];
				pVal[3] = pNet32->rxBuf[7];
				pVal[2] = pNet32->rxBuf[8];
				pVal[1] = pNet32->rxBuf[9];
				pVal[0] = pNet32->rxBuf[10];

				// 자신의 값인 경우에만 net32 queue에 넣는다. 
				if (my_pcm == point.pcm) {
					point.message_type = NET32_TYPE_COMMAND;
					net32_put_queue(&point);

					if ( g_nViewNet32 ) {
						fprintf(stderr, "FromKernel Msg Command %d %d %f\n", 
								point.pcm, point.pno, point.value);
						fflush(stderr);
					}
				}
				break;

			case HANDLER_MSG_REQUIRE:
				point.pcm = pNet32->rxBuf[5];
				point.pno = pNet32->rxBuf[6];
				pVal[3] = pNet32->rxBuf[7];
				pVal[2] = pNet32->rxBuf[8];
				pVal[1] = pNet32->rxBuf[9];
				pVal[0] = pNet32->rxBuf[10];

				// 자신의 값인 경우에만 net32 queue에 넣는다. 
				if (my_pcm == point.pcm) {
					point.message_type = NET32_TYPE_REQUIRE;
					net32_put_queue(&point);

					if ( g_nViewNet32 ) {
						fprintf(stderr, "FromKernel Msg Command %d %d %f\n", 
								point.pcm, point.pno, point.value);
						fflush(stderr);
					}
				}
				break;	

			case HANDLER_MSG_NODE:
				memcpy( g_cNode, &pNet32->rxBuf[3], sizeof(g_cNode) );
				break;
		}
	}
}

/*
********************************************************************* 
* CREATE A NET32_T STRUTURE 
* 
* Description	: This function is called by net32_main() to create NET32_T structure.
* 
* 
* Arguments		: none.
* 
*  
* Returns		: pointer to the NET32_T structure.
* 
********************************************************************* 
*/
NET32_T *New_Net32(void) 
{
	NET32_T *pNet32;
	
	pNet32 = (NET32_T *)malloc( sizeof(NET32_T) );
	memset( pNet32, 0x00, sizeof(NET32_T) );
	
	pNet32->iSendSock 	= -1;
	pNet32->iRcvSock 	= -1;
	
	pNet32->rxBuf = (unsigned char *)net32_rxBuf;
	pNet32->txBuf = (unsigned char *)net32_txBuf;

	memset( pNet32->rxBuf, 0x00, NET32_BUF_SIZE );
	memset( pNet32->txBuf, 0x00, NET32_BUF_SIZE );
	
	pNet32->SendtoKernel 	= on_Send_To_Kernel; 
	pNet32->RecvFromKernel 	= on_Rcv_From_Kernel;
	pNet32->DataHandler		= on_Data_Handler;
	
	return pNet32;
}

/*
********************************************************************* 
* OPEN THE NET32_T STRUTURE 
* 
* Description	: This function is called by net32_main().
* 					- open UART 1 and set baudrate
* 					- create socket that comunication from KERNEL.
* 
* 
* Arguments		: Is a pointer to the NET32_T structure.
* 
*  
* Returns		: 1       If the call was successful
*              	  -1      If not
* 
********************************************************************* 
*/
int Open_Net32( NET32_T *pNet32 ) 
{
	struct termios oldtio, newtio;
	STATUS_THREAD_T *p_net32_t = (STATUS_THREAD_T *) &gp_status->st_net32_t;
	
	pNet32->iNet32Fd = open(MODEMDEVICE, O_RDWR | O_NOCTTY | O_NONBLOCK);
	if (pNet32->iNet32Fd < 0) { 
		fprintf(stderr, "[NET32] : Serial FD Open fail\n");
		fflush(stderr);
		perror(MODEMDEVICE); 
		exit(-1); 
	}
	
	if (tcgetattr(pNet32->iNet32Fd, &oldtio) < 0)
	{
		fprintf(stderr, "[NET32] : error in tcgetattr\n");
		fflush(stderr);
		return -1;
	}
	
	bzero(&newtio, sizeof(newtio));
	newtio.c_cflag = BAUDRATE | CS8 | CLOCAL | CREAD;
	newtio.c_iflag = IGNPAR;
	newtio.c_oflag = 0;
	newtio.c_lflag = 0;
	newtio.c_cc[VTIME] = 0;
	newtio.c_cc[VMIN]  = 1;
	tcflush(pNet32->iNet32Fd, TCIFLUSH);
	tcsetattr(pNet32->iNet32Fd, TCSANOW, &newtio);

	pNet32->iSendSock 	= socket ( PF_INET, SOCK_DGRAM, 0 );
	pNet32->iRcvSock 	= socket ( PF_INET, SOCK_DGRAM, 0 );

	pNet32->addr_send.sin_family = AF_INET;
	pNet32->addr_send.sin_addr.s_addr = inet_addr ("127.0.0.1");
	pNet32->addr_send.sin_port = htons(NET32_SEND_PORT);
	
	pNet32->addr_rcv.sin_family = AF_INET;
	pNet32->addr_rcv.sin_addr.s_addr = htonl(INADDR_ANY);
	pNet32->addr_rcv.sin_port = htons(NET32_RCV_PORT);

	connect ( pNet32->iSendSock, 
		(struct sockaddr *) &pNet32->addr_send,
		sizeof (pNet32->addr_send) );

	if ( bind ( pNet32->iRcvSock, 
			(struct sockaddr *) &pNet32->addr_rcv,
			sizeof (pNet32->addr_rcv) )  == -1 ) {
		return -1;
	}

	// check status
	p_net32_t->n_connetion = 1;

	return 1;
}


/*
********************************************************************* 
* NET32 MAIN LOOP 
* 
* Description	: This function is called by main().
* 					- create NET32_T structer
* 					- open UART 1
* 					- data that getting Net32_Message_Queue send to KERNEL.
* 					- data receive from KERNEL and insert Net32_Queue.
* 
* 
* Arguments		: none.
* 
*  
* Returns		: none.
* 
********************************************************************* 
*/
void *net32_main(void *arg)
{
	NET32_T *pNet32;
	int (*Send)(void *);
	int (*Recv)(void *);	
	void (*Handler)(void *);
	STATUS_THREAD_T *p_net32_t = (STATUS_THREAD_T *) &gp_status->st_net32_t;

	pNet32 = New_Net32();
	
	Send = 		pNet32->SendtoKernel;
	Recv = 		pNet32->RecvFromKernel;	
	Handler = 	pNet32->DataHandler;

	if ( Open_Net32(pNet32) < 0 ) {
		// check status
		p_net32_t->n_connetion = 0;

		fprintf(stderr, "[NET32] : Can not open net32\n");
		fflush(stderr);
		exit(0);
	}

	sleep(2);

	for(;;) {
		p_net32_t->n_loopcnt++;

		Send(pNet32);

		net32_sleep( 0, 2000 );

		if ( Recv(pNet32) > 0 ) 
			Handler(pNet32);
	}
}


